/**
 * Middleware para autenticar requisi√ß√µes do webhook Ciclus
 * Valida√ß√£o simples do x-api-key conforme documenta√ß√£o
 * @param {Object} req - Requisi√ß√£o Express
 * @param {Object} res - Resposta Express
 * @param {Function} next - Pr√≥ximo middleware
 */
function authenticateWebhook(req, res, next) {
  // Extrair a chave do header
  const apiKey = req.headers["x-api-key"];

  // Verificar se a chave foi enviada
  if (!apiKey) {
    return res.status(401).json({
      error: "N√£o autorizado",
      message: "x-api-key ausente ou inv√°lido",
    });
  }

  // Verificar se temos uma chave configurada
  const validApiKey = process.env.API_KEY;
  if (!validApiKey) {
    console.error("‚ö†Ô∏è API_KEY n√£o configurada no ambiente");
    return res.status(500).json({
      error: "Erro interno do servidor",
    });
  }

  // Comparar as chaves
  if (apiKey !== validApiKey) {
    console.log(
      `‚ö†Ô∏è Tentativa de acesso com chave inv√°lida: ${apiKey.substring(0, 8)}...`
    );
    return res.status(401).json({
      error: "N√£o autorizado",
      message: "x-api-key ausente ou inv√°lido",
    });
  }

  // ‚úÖ Autenticado com sucesso
  console.log(`‚úÖ Webhook autenticado: ${new Date().toISOString()}`);
  next();
}

/**
 * Middleware simples para log das requisi√ß√µes
 * @param {Object} req - Requisi√ß√£o Express
 * @param {Object} res - Resposta Express
 * @param {Function} next - Pr√≥ximo middleware
 */
function simpleLogger(req, res, next) {
  const timestamp = new Date().toISOString();
  console.log(`üì° ${timestamp} - ${req.method} ${req.path}`);
  next();
}

/**
 * Middleware para validar JSON em requisi√ß√µes POST
 * @param {Object} req - Requisi√ß√£o Express
 * @param {Object} res - Resposta Express
 * @param {Function} next - Pr√≥ximo middleware
 */
function validateJSON(req, res, next) {
  if (req.method === "POST") {
    const contentType = req.headers["content-type"];

    if (!contentType || !contentType.includes("application/json")) {
      return res.status(400).json({
        error: "Requisi√ß√£o inv√°lida (erro de valida√ß√£o do JSON)",
        message: "Content-Type deve ser application/json",
      });
    }
  }

  next();
}

module.exports = {
  authenticateWebhook,
  simpleLogger,
  validateJSON,
};
